	x = x_h * 2^64 + x_l
	y = y_h * 2^64 + y_l
	p = x * y = (x_h * 2^64 + x_l) * (y_h * 2^64 + y_l) 
	  = x_h * y_h * 2^128 + (x_l * y_h + x_h * y_l) * 2_64 + x_l * y_l
	x_h * y_h * 2^128 显然溢出
	p_h * 2^64 + p_l =  (x_l * y_h + x_h * y_l) * 2^64 + x_l * y_l
	p_h * 2_64 = (x_l * y_h + x_h * y_l) * 2^64 + x_l * y_l - p_l
	p_h = (x_l * y_h + x_h * y_l) + x_l * y_l / 2^64 - p_l / 2^64
	p_l / 2^64 = 0 显然
	x_l * y_l / 2^64 为 x_l * y_l 的高64位
	故 p_h = (x_l * y_h + x_h * y_l) + x_l * y_l / 2^64
	
	
	*dest in %rdi, x in %rsi, y in %rdx 

    	stroe_prod:`
 	movq %rdx, %rax         # %rax = y_l
   	cqto                    # 把%rax中的符号位扩展到%rdx中形成一个类似128位的变量,%rdx = y_h
    	movq %rsi, %rcx         # 
    	sarq $63, %rcx          # 获取x的高64的值%rcx = x_h
    	imulq %rax, %rcx        # 计算y_l * x_h = %rax * %rcx
    	imulq %rsi, %rdx        # 计算y_h * x_l = %rdx * %rsi
    	addq %rdx, %rcx         # 计算x_h * y_l + x_l * y_h的值
    	mulq %rsi               # %rax = %rax * %rsi的值，也就是x_l * y_l的值,此时%rdx变成x_l * y_l的高64位 
    	addq %rcx, %rdx         # 根据上边我们得出的结论，进行相加处理得到p_h
	movq %rax, (%rdi)       # 将 p_l = x_l * y_l 的低64位赋值给目标地址的低64位
	movq %rdx, 8(%rdi)      # 将 p_h 赋值给目标地址的高64位
	ret 